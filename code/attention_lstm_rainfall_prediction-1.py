# -*- coding: utf-8 -*-
"""attention-lstm-rainfall-prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19z8MfcXmCLceR8rKIeCDZSHNxUnvU1oH

<h1 align="center">Rainfall Predict with LSTM and LSTM Attention </h1>

Import the library needed
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
import tensorflow as tf
from tensorflow.keras.models import Sequential # type: ignore
from tensorflow.keras.layers import LSTM, Dense, Attention, Add, Concatenate, Input # type: ignore # type: ignore
from tensorflow.keras.models import Model # type: ignore
import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_error

"""Read data"""

# Membaca data
rainfall_data_url = "https://raw.githubusercontent.com/arifian853/rainfall-predict-lstm-attention/master/dataset/cleaned/data_cleaned.csv"
df = pd.read_csv(rainfall_data_url, parse_dates=['Date'], index_col='Date')

# Mengonversi arah mata angin ke sudut derajat
wind_directions = {
    'N': 0, 'NE': 45, 'E': 90, 'SE': 135, 'S': 180,
    'SW': 225, 'W': 270, 'NW': 315, 'C': 360  # Misalnya, 'C' direpresentasikan dengan 360 derajat
}

df['ddd_car'] = df['ddd_car'].map(wind_directions)

"""Separate data and feature selection"""

# Membagi data menjadi training, validation, dan testing sets
train = df['01/01/2019':'31/12/2021']
validation = df['01/01/2022':'31/12/2022']
test = df['01/01/2023':'31/12/2023']

# Memilih fitur dan target
features = ['Tavg', 'RH_avg', 'ddd_x', 'ff_avg', 'ddd_car', 'ss']
X_train = train[features]
y_train = train['RR']
X_val = validation[features]
y_val = validation['RR']
X_test = test[features]
y_test = test['RR']

"""Normalization and convert to sequence the data"""

# Normalisasi data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)
X_test_scaled = scaler.transform(X_test)

# Fungsi untuk membentuk data menjadi sequence
def create_sequences(X, y, time_steps=1):
    Xs, ys = [], []
    for i in range(len(X) - time_steps):
        Xs.append(X[i:(i + time_steps)])
        ys.append(y[i + time_steps])
    return np.array(Xs), np.array(ys)

time_steps = 20  # Misalnya, gunakan 20 hari sebelumnya untuk memprediksi hari berikutnya
X_train_seq, y_train_seq = create_sequences(X_train_scaled, y_train.values, time_steps)
X_val_seq, y_val_seq = create_sequences(X_val_scaled, y_val.values, time_steps)
X_test_seq, y_test_seq = create_sequences(X_test_scaled, y_test.values, time_steps)

"""Data shape verification"""

# Verifikasi bentuk data
print("Shape of X_train_seq:", X_train_seq.shape)
print("Shape of y_train_seq:", y_train_seq.shape)
print("Shape of X_val_seq:", X_val_seq.shape)
print("Shape of y_val_seq:", y_val_seq.shape)
print("Shape of X_test_seq:", X_test_seq.shape)
print("Shape of y_test_seq:", y_test_seq.shape)

"""Regular LSTM model build and training"""

# Membangun model LSTM biasa
model_lstm = Sequential()
model_lstm.add(LSTM(50, activation='relu', input_shape=(time_steps, X_train_seq.shape[2])))
model_lstm.add(Dense(1))
model_lstm.compile(optimizer='adam', loss='mse')

# Melatih model LSTM
history_lstm = model_lstm.fit(X_train_seq, y_train_seq, epochs=100, batch_size=32, validation_data=(X_val_seq, y_val_seq))

# Evaluasi model LSTM
y_pred_lstm = model_lstm.predict(X_test_seq)
mse_lstm = mean_squared_error(y_test_seq, y_pred_lstm)
mae_lstm = mean_absolute_error(y_test_seq, y_pred_lstm)
print(f'MSE LSTM: {mse_lstm}')
print(f'MAE LSTM: {mae_lstm}')

"""LSTM Attention Mechanism model build and training"""

# Fungsi untuk membuat model LSTM dengan Attention Mechanism
def build_lstm_attention_model(input_shape):
    inputs = Input(shape=input_shape)
    lstm_out = LSTM(50, return_sequences=True)(inputs)
    attention = Attention()([lstm_out, lstm_out])
    context_vector = Add()([lstm_out, attention])
    context_vector = LSTM(50, activation='relu')(context_vector)
    outputs = Dense(1)(context_vector)
    model = Model(inputs, outputs)
    model.compile(optimizer='adam', loss='mse')
    return model

# Membangun model LSTM dengan Attention Mechanism
input_shape = (time_steps, X_train_seq.shape[2])
model_lstm_attention = build_lstm_attention_model(input_shape)

# Melatih model LSTM dengan Attention Mechanism
history_lstm_attention = model_lstm_attention.fit(X_train_seq, y_train_seq, epochs=100, batch_size=32, validation_data=(X_val_seq, y_val_seq))

# Evaluasi model LSTM dengan Attention Mechanism
y_pred_lstm_attention = model_lstm_attention.predict(X_test_seq)
mse_lstm_attention = mean_squared_error(y_test_seq, y_pred_lstm_attention)
mae_lstm_attention = mean_absolute_error(y_test_seq, y_pred_lstm_attention)
print(f'MSE LSTM with Attention: {mse_lstm_attention}')
print(f'MAE LSTM with Attention: {mae_lstm_attention}')

"""Result and evaluation"""

# Plot hasil pelatihan
plt.figure(figsize=(12, 6))
plt.plot(history_lstm.history['loss'], label='Training Loss LSTM')
plt.plot(history_lstm.history['val_loss'], label='Validation Loss LSTM')
plt.plot(history_lstm_attention.history['loss'], label='Training Loss LSTM with Attention')
plt.plot(history_lstm_attention.history['val_loss'], label='Validation Loss LSTM with Attention')
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

# Menampilkan hasil evaluasi
print(f'MSE LSTM: {mse_lstm}')
print(f'MAE LSTM: {mae_lstm}')
print(f'MSE LSTM with Attention: {mse_lstm_attention}')
print(f'MAE LSTM with Attention: {mae_lstm_attention}')

"""Nilai prediksi dan nilai asli LSTM Regular"""

# Plot prediksi vs nilai sebenarnya
plt.figure(figsize=(10, 6))
plt.plot(y_test_seq, label='Actual')
plt.plot(y_pred_lstm, label='Predicted')
plt.title('Actual with LSTM vs Predicted Values')
plt.xlabel('Time Steps')
plt.ylabel('RR (Curah Hujan)')
plt.legend()
plt.show()

"""Nilai prediksi dan nilai asli LSTM Attention"""

# Plot prediksi vs nilai sebenarnya
plt.figure(figsize=(10, 6))
plt.plot(y_test_seq, label='Actual')
plt.plot(y_pred_lstm_attention, label='Predicted')
plt.title('Actual with LSTM Attention vs Predicted Values')
plt.xlabel('Time Steps')
plt.ylabel('RR (Curah Hujan)')
plt.legend()
plt.show()